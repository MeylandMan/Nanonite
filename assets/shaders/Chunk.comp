#version 460 core

#define BLOCK_SIZE 16
#define VERTICES_CLIPPING -200000000000.0

out vec3 fragPos;
out vec3 worldPos;

out float inside;
out vec2 v_TexCoords;
out float TextureIndex;

// Positions locales des sommets d’un cube

const vec2 texCoords[6] = vec2[](
    vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 1.0),
    vec2(0.0, 0.0), vec2(1.0, 1.0), vec2(0.0, 1.0)
);

struct BlockFace {
    float positionX, positionY, positionZ;
    float minAABBX, minAABBY, minAABBZ;
    float maxAABBX, maxAABBY, maxAABBZ;

    float id;
    float FaceID;
};

struct Plane {
    double a, b, c, d;
};


layout(std430, binding = 0) buffer BlockData {
    BlockFace faces[];
};

uniform mat4 projection;
uniform mat4 view;
uniform vec3 Position;

uniform Plane viewFrustum[6];

#define PROJECTION_VIEW_MATRIX mat4(projection * view)

vec3[6] getVertices(uint faceID, vec3 mn, vec3 mx);

bool isPointInside(Plane plane, double x, double y, double z);

void main() {

    int faceIndex = int(gl_VertexID/6);

    vec3 mn = vec3(faces[faceIndex].minAABBX/BLOCK_SIZE,
    faces[faceIndex].minAABBY/BLOCK_SIZE,
    faces[faceIndex].minAABBZ/BLOCK_SIZE);

    vec3 mx = vec3(faces[faceIndex].maxAABBX/BLOCK_SIZE,
    faces[faceIndex].maxAABBY/BLOCK_SIZE,
    faces[faceIndex].maxAABBZ/BLOCK_SIZE);

    vec3 FaceVertices[6] = getVertices(uint(faces[faceIndex].FaceID), mn, mx);

    int vertexIndex = gl_VertexID % 6;

    vec3 localPosition = vec3(faces[faceIndex].positionX, faces[faceIndex].positionY, faces[faceIndex].positionZ);
    fragPos = FaceVertices[vertexIndex] + localPosition;

    // Assigner les coordonnées de texture (UV)
    v_TexCoords = texCoords[vertexIndex % 6];
    TextureIndex = faces[faceIndex].id;


    vec3 worldPosition = vec3(fragPos+vec3(Position.x * 16, Position.y, Position.z * 16));

    bool isInside;
    for(uint i = 0; i < 6; i++) {
        isInside = isPointInside(viewFrustum[i], worldPosition.x, worldPosition.y, worldPosition.z);
    }

    worldPosition = (!isInside)? vec3(VERTICES_CLIPPING, VERTICES_CLIPPING, VERTICES_CLIPPING) :
    worldPosition; // Put the vertices very far AWAY

    inside = (isInside)? 1.0 : 0.0;

    worldPos = worldPosition;
    gl_Position = PROJECTION_VIEW_MATRIX * vec4(worldPosition, 1.0);

}

vec3[6] getVertices(uint faceID, vec3 mn, vec3 mx) {
    vec3 vertices[6];
    switch(faceID) {
        // FRONT
        case 0:
            vertices = vec3[](
            vec3(mn.x, mn.y, mx.z), vec3(mx.x, mn.y, mx.z), vec3(mx.x, mx.y, mx.z),
            vec3(mn.x, mn.y, mx.z), vec3(mx.x, mx.y, mx.z), vec3(mn.x, mx.y, mx.z)
            );
            break;
        // BACK
        case 1:
            vertices = vec3[](
            vec3(mx.x, mn.y, mn.z), vec3(mn.x, mn.y, mn.z), vec3(mn.x, mx.y, mn.z),
            vec3(mx.x, mn.y, mn.z), vec3(mn.x, mx.y, mn.z), vec3(mx.x, mx.y, mn.z)
            );
            break;
        // RIGHT
        case 2:
            vertices = vec3[](
            vec3(mn.x, mn.y, mn.z), vec3(mn.x, mn.y, mx.z), vec3(mn.x, mx.y, mx.z),
            vec3(mn.x, mn.y, mn.z), vec3(mn.x, mx.y, mx.z), vec3(mn.x, mx.y, mn.z)
            );
            break;
        // LEFT
        case 3:
            vertices = vec3[](
            vec3(mx.x, mn.y, mx.z), vec3(mx.x, mn.y, mn.z), vec3(mx.x, mx.y, mn.z),
            vec3(mx.x, mn.y, mx.z), vec3(mx.x, mx.y, mn.z), vec3(mx.x, mx.y, mx.z)
            );
            break;
        // TOP
        case 4:
            vertices = vec3[](
            vec3(mn.x, mx.y, mx.z), vec3(mx.x, mx.y, mx.z), vec3(mx.x, mx.y, mn.z),
            vec3(mn.x, mx.y, mx.z), vec3(mx.x, mx.y, mn.z), vec3(mn.x, mx.y, mn.z)
            );
            break;
        // BOTTOM
        case 5:
            vertices = vec3[](
            vec3(mn.x, mn.y, mn.z), vec3(mx.x, mn.y, mn.z), vec3(mx.x, mn.y, mx.z),
            vec3(mn.x, mn.y, mn.z), vec3(mx.x, mn.y, mx.z), vec3(mn.x, mn.y, mx.z)
            );
            break;
    }

    return vertices;
}

bool isPointInside(Plane plane, double x, double y, double z) {
    return plane.a * x + plane.b * y + plane.c * z + plane.d >= 0;
}