#version 460 core

#define BLOCK_SIZE 16
#define VERTICES_CLIPPING -200000000000.0
#define PI 3.1415926535

out vec3 fragPos;
out vec3 v_Normal;
out vec3 worldPos;

out vec2 v_TexCoords;
out float TextureIndex;
out float CdotH;

// Positions locales des sommets d’un cube

const vec2 texCoords[6] = vec2[](
    vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.01),
    vec2(0.0, 0.0), vec2(1.0, 0.01), vec2(0.0, 0.01)
);

struct BlockFace {
    float positionX, positionY, positionZ;
    float minAABBX, minAABBY, minAABBZ;
    float maxAABBX, maxAABBY, maxAABBZ;

    float id;
    float FaceID;
};


layout(std430, binding = 0) buffer BlockData {
    BlockFace faces[];
};

uniform mat4 projection;
uniform mat4 view;
uniform vec3 Position;

uniform float Time;

#define PROJECTION_VIEW_MATRIX mat4(projection * view)

vec3[6] getVertices(uint faceID, vec3 mn, vec3 mx);
vec3 getNormal(uint faceID);

void main() {

    int faceIndex = int(gl_VertexID/6);

    vec3 mn = vec3(faces[faceIndex].minAABBX/BLOCK_SIZE,
    faces[faceIndex].minAABBY/BLOCK_SIZE,
    faces[faceIndex].minAABBZ/BLOCK_SIZE);

    vec3 mx = vec3(faces[faceIndex].maxAABBX/BLOCK_SIZE,
    faces[faceIndex].maxAABBY/BLOCK_SIZE,
    faces[faceIndex].maxAABBZ/BLOCK_SIZE);

    vec3 FaceVertices[6] = getVertices(uint(faces[faceIndex].FaceID), mn, mx);

    int vertexIndex = gl_VertexID % 6;

    vec3 localPosition = vec3(faces[faceIndex].positionX, faces[faceIndex].positionY, faces[faceIndex].positionZ);
    fragPos = FaceVertices[vertexIndex] + localPosition;

    // Assigner les coordonnées de texture (UV)
    v_TexCoords = texCoords[vertexIndex % 6];
    TextureIndex = faces[faceIndex].id;
    v_Normal = getNormal(uint(faces[faceIndex].FaceID));

    vec3 chunkPosition = Position * 16;
    vec3 worldPosition = vec3(fragPos+chunkPosition);

    vec3 eye_space_normal = (view * vec4(v_Normal, 0.0)).xyz;
    vec3 eye_space_camera = vec3(0.0, 1.0, 0.0);

    CdotH = clamp(dot(normalize(eye_space_camera), normalize(eye_space_normal)), 0.3, 0.65);

    worldPosition.y = (faces[faceIndex].FaceID == 4) ? worldPosition.y - 0.1 : worldPosition.y;
    worldPosition.y += (sin(worldPosition.x * PI / 2 + Time) +
            sin(worldPosition.z * PI / 2 + Time * 1.5)) * 0.05;

    worldPos = worldPosition;
    gl_Position = PROJECTION_VIEW_MATRIX * vec4(worldPosition, 1.0);

}

vec3 getNormal(uint faceID) {
    vec3 norm;
    switch(faceID) {
        case 0:
            norm = vec3(0.0, 0.0, 1.0);
            break;
        case 1:
            norm = vec3(0.0, 0.0, -1.0);
            break;
        case 2:
            norm = vec3(-1.0, 0.0, 0.0);
            break;
        case 3:
            norm = vec3(1.0, 0.0, 0.0);
            break;
        case 4:
            norm = vec3(0.0, 1.0, 0.0);
            break;
        case 5:
            norm = vec3(0.0, -1.0, 0.0);
            break;
        default:
            norm = vec3(1.0);
            break;
    }
    return norm;
}

vec3[6] getVertices(uint faceID, vec3 mn, vec3 mx) {
    vec3 vertices[6];
    switch(faceID) {
    // FRONT
        case 0:
            vertices = vec3[](
            vec3(mn.x, mn.y, mx.z), vec3(mx.x, mn.y, mx.z), vec3(mx.x, mx.y, mx.z),
            vec3(mn.x, mn.y, mx.z), vec3(mx.x, mx.y, mx.z), vec3(mn.x, mx.y, mx.z)
            );
            break;
    // BACK
        case 1:
            vertices = vec3[](
            vec3(mx.x, mn.y, mn.z), vec3(mn.x, mn.y, mn.z), vec3(mn.x, mx.y, mn.z),
            vec3(mx.x, mn.y, mn.z), vec3(mn.x, mx.y, mn.z), vec3(mx.x, mx.y, mn.z)
            );
            break;
    // RIGHT
        case 2:
            vertices = vec3[](
            vec3(mn.x, mn.y, mn.z), vec3(mn.x, mn.y, mx.z), vec3(mn.x, mx.y, mx.z),
            vec3(mn.x, mn.y, mn.z), vec3(mn.x, mx.y, mx.z), vec3(mn.x, mx.y, mn.z)
            );
            break;
    // LEFT
        case 3:
            vertices = vec3[](
            vec3(mx.x, mn.y, mx.z), vec3(mx.x, mn.y, mn.z), vec3(mx.x, mx.y, mn.z),
            vec3(mx.x, mn.y, mx.z), vec3(mx.x, mx.y, mn.z), vec3(mx.x, mx.y, mx.z)
            );
            break;
    // TOP
        case 4:
            vertices = vec3[](
            vec3(mn.x, mx.y, mx.z), vec3(mx.x, mx.y, mx.z), vec3(mx.x, mx.y, mn.z),
            vec3(mn.x, mx.y, mx.z), vec3(mx.x, mx.y, mn.z), vec3(mn.x, mx.y, mn.z)
            );
            break;
    // BOTTOM
        case 5:
            vertices = vec3[](
            vec3(mn.x, mn.y, mn.z), vec3(mx.x, mn.y, mn.z), vec3(mx.x, mn.y, mx.z),
            vec3(mn.x, mn.y, mn.z), vec3(mx.x, mn.y, mx.z), vec3(mn.x, mn.y, mx.z)
            );
            break;
    }

    return vertices;
}